//********************************** Libraries that are to be used **********************************
#include <LiquidCrystal.h> // LIBRARY TO ACCESS THE LCD DISPLAY
#include <EventBuffer.h>
#include <Keypad.h>
#include <EventBuffer.h>
//***************************************************************************************************


//***************************************** Global Variables ****************************************
int menuCount = 0; // used to select which screen you are working in
char keypadCharacterpadInput = 0;
int keypadCharacterpadSelection = 0;
int iDEntry = 0;
int currentMenu = 0;
char key0;
char key1;
char key2;
char key3;
char menuChoice;
//***************************************************************************************************


//****************************************** Joystick Stuff *****************************************
const int SW_pin = 53; // digital pin that the joystick is plugged into
const int X_pin = 0; // analog pin connected to VRx
const int Y_pin = 1; // analog pin connected to VRy
float joystickX = 0.0;
float joystickY = 0.0;
//***************************************************************************************************


//************************************** keypadCharacterpad Stuff ***********************************
const byte ROWS = 4; // rows
const byte COLS = 3; // columns

char keys[ROWS][COLS] = {
  {'1', '2', '3'},
  {'4', '5', '6'},
  {'7', '8', '9'},
  {'*', '0', '#'}
};

byte rowPins[ROWS] = {45, 47, 49, 51}; //connect to the row pinouts of the keypadCharacterpad
byte colPins[COLS] = {46, 48, 50}; //connect to the column pinouts of the keypadCharacterpad

Keypad keypad = Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS );
//***************************************************************************************************


//**************************************** Language Variables ***************************************
bool englishFlag = true;
bool japaneseFlag = false; //日の丸です！
bool spanishFlag = false;
//***************************************************************************************************


//******************************************** LCD Stuff ********************************************
const int rs = 13, en = 12, d4 = 11, d5 = 10, d6 = 9, d7 = 8; // declares which pins are plugged in where
LiquidCrystal lcd(rs, en, d4, d5, d6, d7); // Sets up which pins go to the LCD display
//***************************************************************************************************


//***************************************** Password Arrays *****************************************
char userID [4] = {'_', '_', '_', '_'}; // A blank array that will have four slots for a user input
char userIDCheck [4] = {'1', '2', '3', '4'}; // This is the "Correct" user ID that will be compared to the input
boolean iDFlag [4] = {false, false, false, false}; // Used to check which place we are in the loop
char passwordInput [4] = {95, 95, 95, 95}; // Characters in the array that indicate blanks
//***************************************************************************************************


//***************************************************************************************************
//***************************************************************************************************
//********************************************** Setup **********************************************
//***************************************************************************************************
//***************************************************************************************************
void setup() {
  Serial.begin(9600); // opens serial port, sets data rate to 9600 bps
  lcd.begin(16, 2); // set up the LCD's number of columns and rows

  pinMode(SW_pin, INPUT);
  digitalWrite(SW_pin, HIGH);
  Serial.begin(9600);


  // Welcome Message
  lcd.setCursor(0, 0); // sets cursor at column 0, row 0
  lcd.print("Welcome To");
  lcd.setCursor(0, 1); // sets cursor at column 0, row 1
  lcd.print("  Arduino   ");
  lcd.clear();
}


//***************************************************************************************************
//***************************************************************************************************
//*********************************************** Loop **********************************************
//***************************************************************************************************
//***************************************************************************************************
void loop() {

  delay(200);  // delays the loop so that the LCD screen can actually be read

  joystickX = analogRead(X_pin);  // Allows the joystick to work in the X direction

  if (currentMenu < 10) {

    int mainMenu = menuSelect(joystickX, 1); // the number of menus is menu + 1, so 2 creates 3 menus

    switch (mainMenu) {

      //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ "to dispense" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      case 0:
        char keyInput;
        menuChoice = keypad.getKey();
        lcd.setCursor(0, 0);
        lcd.clear();
        lcd.print("To dispense");
        lcd.setCursor(1, 1);
        lcd.print("press #");
        currentMenu = 1;
        if (menuChoice == '#') { // if the entered character is #
          currentMenu = 10;  // Change the variable 'currentMenu', in order to select a new menu
          key0 = 95; // resets keypadCharacterpad character.
        }
        else {
          currentMenu = currentMenu; // if # isn't entered, do nothing.
        }
        break; // break for case zero, ends 'to dispense' menu

      //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ "settings" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      case 1:
        lcd.setCursor(0, 0);
        lcd.clear();
        lcd.print("Settings");
        currentMenu = 2;
        break;
    } // closing brace for mainMenu
  } // closing brace for if (currentMenu < 10)

  else if (currentMenu >= 10 && currentMenu < 20) { // Dispense submenu

    int dispenseMenu = menuSelect(joystickX, 1);

    switch (dispenseMenu) { // this block starts the dispense submenu

      //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ username input ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      case 0:
        lcd.setCursor(0, 0);
        lcd.clear();
        lcd.print("Enter user ID:");

        if (iDFlag[0] == false && iDFlag[1] == false && iDFlag[2] == false && iDFlag[3] == false) {
          key0 = keypad.getKey();
        }
        else if (iDFlag[0] == true && iDFlag[1] == false && iDFlag[2] == false && iDFlag[3] == false) {
          key1 = keypad.getKey();
        }
        else if (iDFlag[0] == true && iDFlag[1] == true && iDFlag[2] == false && iDFlag[3] == false) {
          key2 = keypad.getKey();
          userID[2] = key2;
        }
        else if (iDFlag[0] == true && iDFlag[1] == true && iDFlag[2] == true && iDFlag[3] == false) {
          key3 = keypad.getKey();
          userID[3] = key3;
        }
        else {
          bool successCheck; // local variable used to move on to next menu if necessary
          successCheck = arrayCheck(userID, userIDCheck); // compares userID against the predefined "password"
          if (successCheck == true) {
            flagReset(); // calls the function flagReset to change all values of iDFlag to false
            keyReset(); // This function resets the keys to be NO_KEY          }
            currentMenu = 20;
          }
          else {
            flagReset(); // calls the function flagReset to change all values of iDFlag to false
            keyReset(); // This function resets the keys to be NO_KEY
          }
        }

        arrayInput(userID);  // calls on the function arrayInput in order to input values into the username array

        break;  // this is the break for case 0, ends 'username input' menu

      //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ go back ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      case 1:
        for (int x = 0; x < 4; x++) {
          userID[x] = '_'; // resets userID for all values in the array
        }

        for (int x = 0; x < 4; x++) {
          iDFlag[x] = false; // resets iDFlag for all values in the array
        }

        keyReset(); // This function resets the keys to be NO_KEY

        lcd.setCursor(0, 0);
        lcd.clear();
        lcd.print("To go back");
        lcd.setCursor(1, 1);
        lcd.print("press *");

        int previousSelect = keypadCharacterpadDecoder(menuChoice);

        if (previousSelect == 42) {
          currentMenu = 0;
        }

        else {
          currentMenu = currentMenu;
        }

        break; // break for case 1, ends 'go back' menu

    } // switch(dispenseMenu) closing curly brace

  } // closing curly brace for (currentMenu >= 10 && currentMenu < 20) (username input)

  else if (currentMenu >= 20 && currentMenu < 30) {

    int passwordMenu = menuSelect(joystickX, 1);

    switch (passwordMenu) { // this block starts the password submenu

      //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ password input ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      case 0:
        lcd.setCursor(0, 0);
        lcd.clear();
        lcd.print("Enter password:");

        if (iDFlag[0] == false && iDFlag[1] == false && iDFlag[2] == false && iDFlag[3] == false) {
          key0 = keypad.getKey();
        }
        else if (iDFlag[0] == true && iDFlag[1] == false && iDFlag[2] == false && iDFlag[3] == false) {
          key1 = keypad.getKey();
        }
        else if (iDFlag[0] == true && iDFlag[1] == true && iDFlag[2] == false && iDFlag[3] == false) {
          key2 = keypad.getKey();
          userID[2] = key2;
        }
        else if (iDFlag[0] == true && iDFlag[1] == true && iDFlag[2] == true && iDFlag[3] == false) {
          key3 = keypad.getKey();
          userID[3] = key3;
        }
        else {
          bool successCheck; // local variable used to move on to next menu if necessary
          successCheck = arrayCheck(userID, userIDCheck); // compares userID against the predefined "password"
          if (successCheck == true) {
            lcd.clear();
            lcd.setCursor(0, 1); // sets cursor at column 0, row 0
            lcd.print("Success!");
          }
          else {
            flagReset(); // calls the function flagReset to change all values of iDFlag to false
            keyReset(); // This function resets the keys to be NO_KEY
          }
        }

        arrayInput(userID);  // calls on the function arrayInput in order to input values into the username array

        break;  // this is the break for case 0, ends 'password input' menu

      //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ go back ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      case 1:
        for (int x = 0; x < 4; x++) {
          userID[x] = '_'; // resets userID for all values in the array
        }

        for (int x = 0; x < 4; x++) {
          iDFlag[x] = false; // resets iDFlag for all values in the array
        }

        keyReset(); // This function resets the keys to be NO_KEY

        lcd.setCursor(0, 0);
        lcd.clear();
        lcd.print("To go back");
        lcd.setCursor(1, 1);
        lcd.print("press *");

        int previousSelect = keypadCharacterpadDecoder(menuChoice);

        if (previousSelect == 42) {
          currentMenu = 0;
        }

        else {
          currentMenu = currentMenu;
        }

        break; // break for case 1, ends 'go back' menu

    } // closing brace for the switch statement

  } // closing curly brace for (currentMenu >= 20 && currentMenu < 30) (password input)

} // main loop closing curly brace

//***************************************************************************************************
//***************************************************************************************************
//********************************************* Functions *******************************************
//***************************************************************************************************
//***************************************************************************************************

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ arrayCheck ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Compares two arrays against each other, used for user ID and password input

bool arrayCheck(char array1[], char array2[]) {

  bool checkArrays [4] = {false, false, false, false};
  int counter = 0;
  bool finalCheck; // this is what the function will return

  for (int i = 0; i < 4; i++) {

    if (array1[i] == array2[i]) {
      checkArrays[i] = true;
    }

    else {
      checkArrays[i] = false;
    }

  }

  for (int i = 0; i < 4; i++) {
    counter = counter + checkArrays[i]; // counts the number of trues in the ID flag array, if true then we add a 1
  }

  if (counter == 4) {
    finalCheck = true;
  }

  else {
    finalCheck = false;
  }

  return finalCheck; // returns the final check variable as either true or false

}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ arrayInput ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Inputs values into the arary, can be recycled for both username and password.  This function takes
// an array to be modified as an input value, and does not return a value.
void arrayInput(char inputArray[]) {
  if (key0 != NO_KEY && iDFlag[0] == false) {
    inputArray[0] = key0;
    lcd.setCursor(0, 1); // sets cursor at column 0, row 0
    lcdDisplay(inputArray, 1);
    iDFlag[0] = true;
  }
  else {
    lcd.setCursor(0, 1); // sets cursor at column 0, row 0
    lcdDisplay(inputArray, 1);
  }

  if (key1 != NO_KEY && iDFlag[1] == false) {
    inputArray[1] = key1;
    lcd.setCursor(0, 1);
    lcdDisplay(inputArray, 2);
    iDFlag[1] = true;
  }
  else {
    lcd.setCursor(0, 1); // sets cursor at column 0, row 0
    lcdDisplay(userID, 2);
  }

  if (key2 != NO_KEY && iDFlag[2] == false) {
    inputArray[2] = key2;
    lcd.setCursor(0, 1);
    lcdDisplay(inputArray, 3);
    iDFlag[2] = true;
  }
  else {
    lcd.setCursor(0, 1); // sets cursor at column 0, row 0
    lcdDisplay(inputArray, 3);
  }

  if (key3 != NO_KEY && iDFlag[3] == false) {
    inputArray[3] = key3;
    lcd.setCursor(0, 1);
    lcdDisplay(inputArray, 4);
    iDFlag[3] = true;
  }
  else {
    lcd.setCursor(0, 1); // sets cursor at column 0, row 0
    lcdDisplay(inputArray, 4);
  }
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ flagReset ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// This function does not return any value.
// This function resets the ID flags used to determine which place in an array you are to enter a
// value
void flagReset() {

  for (int i = 0; i < 4; i++) {
    iDFlag[i] = false;
  }

}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ idFlagCount ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Counts the number of true variables in the iDFlag array.  For every true, we add a 1, for every
// false, we add a 0.  We then reutrn the total value of the count.
int idFlagCount() {

  int counter = 0;

  for (int i = 0; i < 4; i++) {
    counter = counter + iDFlag[i]; // counts the number of trues in the ID flag array, if true then we add a 1
  }

  return counter;

}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ keypadCharacterpadDecoder ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// The keypadCharacterpadDecoder function takes an input from the keypadCharacter variable.
// It converts an ASCII input variable to a 0-9 integer.  # and * characters return their ASCII values.

int keypadCharacterpadDecoder(int keypadCharacter) {

  switch (keypadCharacter) {

    case 35: // 35 is the ASCII character for #
      keypadCharacterpadSelection = 35; // 95 is the ASCII character for _
      break;

    case 42: // 42 is the ASCII character for *
      keypadCharacterpadSelection = 42;
      break;

    case 48: // 48 is the ASCII character for 0
      keypadCharacterpadSelection = 48;
      break;

    case 49: // 49 is the ASCII character for 1
      keypadCharacterpadSelection = 49;
      break;

    case 50: // 50 is the ASCII character for 2
      keypadCharacterpadSelection = 50;
      break;

    case 51: // 51 is the ASCII character for 3
      keypadCharacterpadSelection = 51;
      break;

    case 52: // 52 is the ASCII character for 4
      keypadCharacterpadSelection = 52;
      break;

    case 53: // 53 is the ASCII character for 5
      keypadCharacterpadSelection = 53;
      break;

    case 54: // 54 is the ASCII character for 6
      keypadCharacterpadSelection = 54;
      break;

    case 55: // 55 is the ASCII character for 7
      keypadCharacterpadSelection = 55;
      break;

    case 56: // 56 is the ASCII character for 8
      keypadCharacterpadSelection = 56;
      break;

    case 57: // 57 is the ASCII character for 9
      keypadCharacterpadSelection = 57;
      break;

    default:
      keypadCharacterpadSelection = keypadCharacterpadSelection;
      break;
  }
  return keypadCharacterpadSelection; // returns the keypadCharacterpad number
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ keyReset ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// This void type function will reset the keypad inputs, key0-4 back to NO_KEY
void keyReset() {
  key0 = NO_KEY;
  key1 = NO_KEY;
  key2 = NO_KEY;
  key3 = NO_KEY;
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ lcdDisplay ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// This function, when called will display any number of digits on the LCD display
void lcdDisplay(char Array[], int digits) {
  switch (digits) {
    case 1:
      lcd.print(Array[0]);
      break;

    case 2:
      lcd.print(Array[0]);
      lcd.print(Array[1]);
      break;

    case 3:
      lcd.print(Array[0]);
      lcd.print(Array[1]);
      lcd.print(Array[2]);
      break;

    case 4:
      lcd.print(Array[0]);
      lcd.print(Array[1]);
      lcd.print(Array[2]);
      lcd.print(Array[3]);
      break;
  }
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ menuSelect ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// This function will allow the user to select a menu based on the joystick position, and return a
// variable which will be used to display the correct menu.  The returned variable is called
// menuCount.  This function allows you to control the total number of menus.

int menuSelect(float joystickX, int totalMenus) {  // inputs are joystick position and # of menus
  if (joystickX > 1000) {
    menuCount = menuCount + 1;  // upon moving the joystick increase the menu variable by 1
    keypadCharacterpadSelection = 0;  // clear the keypadCharacterpad Selection variable
    if (menuCount > totalMenus) {
      menuCount = totalMenus; // the menuCount can't go over the total number of menus
    }
  }
  else if (joystickX < 50) {
    menuCount = menuCount - 1;  // decreases the value of menu count by 1
    keypadCharacterpadSelection = 0;
    if (menuCount < 0) {
      menuCount = 0;  // menu count can't go below 0
    }
  }

  else {
    menuCount = menuCount;  // if the joystick didn't move then keep the menu the same
  }

  return menuCount;  // return which menu you are working in.
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ pound2Underscore ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// This function will convert the ASCII input # to _
void pound2Underscore(char keypadArray[], int x) {
  if (keypadArray[x] == 35) {
    keypadArray[x] = 95;
  }
  else {
    keypadArray[x] = keypadArray[x];
  }
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//***************************************************************************************************
//*********************************************** Notes *********************************************
//***************************************************************************************************

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ASCII Cheat Sheet ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// # => 35
// * => 42
// 0 => 48
// 1 => 49
// 2 => 50
// 3 => 51
// 4 => 52
// 5 => 53
// 6 => 54
// 7 => 55
// 8 => 56
// 9 => 57
// _ => 95

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Links ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Micro SD Card Tutorial: https://www.instructables.com/id/Micro-SD-Card-Tutorial/
// Writing functions: https://www.arduino.cc/en/Reference/FunctionDeclaration
// ASCII chart: https://theasciicode.com.ar/ascii-control-characters/null-character-ascii-code-0.html
// Adafruit keypadCharacterpad Demo: https://www.adafruit.com/product/3845