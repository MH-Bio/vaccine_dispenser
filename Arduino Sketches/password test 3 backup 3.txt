// Vaccine dispenser
// Designer: Michael Hernandez
// https://michael-hernandez.info/

//********************************** Libraries that are to be used **********************************
#include <EventBuffer.h>
#include <Keypad.h>
#include <LiquidCrystal.h>
#include <SD.h>
#include <SPI.h>
//***************************************************************************************************


//***************************************** Global Variables ****************************************
bool menuChangeFlag = false; // used for the unlock refill compartment submenu
char key0;
char key1;
char key2;
char key3;
char keypadCharacterpadInput = 0;
char menuChoice;
int currentMenu = 0;
int dispenseMenu = 0;
int iDEntry = 0;
int keypadCharacterpadSelection = 0;
int mainMenu = 0;
int menuCount = 0; // used to select which screen you are working in
int settingsMenu = 0;
int passwordMenu = 0;
//***************************************************************************************************


//****************************************** Joystick Stuff *****************************************
const int SW_pin = 53; // digital pin that the joystick is plugged into
const int X_pin = 0; // analog pin connected to VRx
const int Y_pin = 1; // analog pin connected to VRy
float joystickX = 0.0;
float joystickY = 0.0;
//***************************************************************************************************


//************************************** keypadCharacterpad Stuff ***********************************
const byte ROWS = 4; // rows
const byte COLS = 3; // columns

char keys[ROWS][COLS] = {
  {'1', '2', '3'},
  {'4', '5', '6'},
  {'7', '8', '9'},
  {'*', '0', '#'}
};

byte rowPins[ROWS] = {45, 47, 49, 51}; //connect to the row pinouts of the keypadCharacterpad
byte colPins[COLS] = {46, 48, 50}; //connect to the column pinouts of the keypadCharacterpad

Keypad keypad = Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS );
//***************************************************************************************************


//**************************************** Language Variables ***************************************
bool englishFlag = true;
bool japaneseFlag = false; //日の丸です！
bool spanishFlag = false;
//***************************************************************************************************


//******************************************** LCD Stuff ********************************************
const int rs = 13, en = 12, d4 = 11, d5 = 10, d6 = 9, d7 = 8; // declares which pins are plugged in where
LiquidCrystal lcd(rs, en, d4, d5, d6, d7); // Sets up which pins go to the LCD display
//***************************************************************************************************


//***************************************** Password Arrays *****************************************
boolean iDFlag [4] = {false, false, false, false}; // Used to check which place we are in the loop
char passwordInput [4] = {95, 95, 95, 95}; // stores the password values
char passwordMask [4] = {'_', '_', '_', '_'}; // what will be displayed for password values
char userID [4] = {'_', '_', '_', '_'}; // A blank array that will have four slots for a user input
char userIDCheck [4] = {'1', '2', '3', '4'}; // This is the "Correct" user ID that will be compared to the input
//***************************************************************************************************

//**************************************** Temperature Stuff ****************************************
int currentTemperature = 0;
int temperaturePin = 2; // analog pin A2
//***************************************************************************************************

//***************************************************************************************************
//***************************************************************************************************
//********************************************** Setup **********************************************
//***************************************************************************************************
//***************************************************************************************************
void setup() {
  Serial.begin(9600); // opens serial port, sets data rate to 9600 bps
  lcd.begin(16, 2); // set up the LCD's number of columns and rows

  pinMode(SW_pin, INPUT);
  digitalWrite(SW_pin, HIGH);
  Serial.begin(9600);


  // Welcome Message
  lcd.setCursor(0, 0); // sets cursor at column 0, row 0
  lcd.print("Welcome To");
  lcd.setCursor(0, 1); // sets cursor at column 0, row 1
  lcd.print("  Arduino   ");
  lcd.clear();
}


//***************************************************************************************************
//***************************************************************************************************
//*********************************************** Loop **********************************************
//***************************************************************************************************
//***************************************************************************************************
void loop() {

  delay(200);  // delays the loop so that the LCD screen can actually be read

  joystickX = analogRead(X_pin);  // Allows the joystick to work in the X direction

  if (currentMenu < 10) {

    mainMenu = menuSelect(joystickX, 2); // the number of menus is menu + 1, so 2 creates 3 menus

    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Main Menu ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    switch (mainMenu) {

      //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ "to dispense" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      case 0:
        menuChoice = keypad.getKey();
        lcd.setCursor(0, 0);
        lcd.clear();
        lcd.print("To dispense");
        lcd.setCursor(1, 1);
        lcd.print("press #");
        currentMenu = 1;
        if (menuChoice == '#') { // if the entered character is #
          currentMenu = 10;  // Change the variable 'currentMenu', in order to select a dispense menu (between 10 & 20)
          key0 = 95; // resets keypadCharacterpad character.
        }
        else {
          currentMenu = currentMenu; // if # isn't entered, do nothing.
        }
        break; // break for case zero, ends 'to dispense' menu

      //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ "settings" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      case 1:
        menuChangeFlag = false;
        menuChoice = keypad.getKey();
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Settings");
        lcd.setCursor(1, 1);
        lcd.print("press #");
        if (menuChoice == '#') { // if the entered character is #
          currentMenu = 30;  // Change the variable 'currentMenu', in order to select a new menu
        }
        else {
          currentMenu = currentMenu; // if # isn't entered, do nothing.
        }
        break;

      //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ "unlock" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      case 2:

        char keyInput; // creates a local variable to read the keypad

        if (menuChangeFlag == true && currentMenu < 10) {
          mainMenu = 1; // change the global variable "mainMenu" to be 1, and force it to go to the previous screen
          break;
        }

        else if (menuChangeFlag == true && currentMenu >= 10) {
          dispenseMenu = 0;
          joystickX = 0.0;
          break;
        }

        else {
          for (int i = 0; i < 25; i++) {

            joystickX = analogRead(X_pin);  // Allows the joystick to work in the X direction

            if (joystickX < 50) {
              mainMenu = 1; // force the mainMenu variable to be 1
              menuChangeFlag = true; // change the menu flag to be true
              i = 26; // overloads the counter variable in the loop
              mainMenu = menuSelect(joystickX, 1); // changes the number of menus to 2 to force the program to the next screen
              break; // break the loop
            }

            lcd.clear();
            lcd.setCursor(-i, 0); // as the counter counts up, changes the position to be the inverse of that, forcing the display left
            lcd.print("Open refill compartment         "); // spaces added so that the last few letters don't "get stuck" above "press #"
            lcd.setCursor(1, 1);
            lcd.print("press #");

            if (i == 0) {
              delay(1500); // delay 1.5 seconds
            }
            else {
              delay(300); // delay 3/10 of a second
            }

            keyInput = keypad.getKey();

            if (keyInput == '#') { // if the entered character is #
              currentMenu = 11;  // Change the variable 'currentMenu', in order to select a dispense menu (between 10 & 20)
              dispenseMenu = 0;
              menuChangeFlag = true;
              i = 26; // overloads the counter in the loop
              dispenseMenu = menuSelect(joystickX, 0); // changes the number of menus to 1 to force the program to the correct screen
              joystickX = 0.0;
              break;
            }

            else {
              currentMenu = currentMenu; // if # isn't entered, do nothing.
            }

          }
        }
    } // closing brace for mainMenu
  } // closing brace for if (currentMenu < 10)

  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Dispense Menu ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  else if (currentMenu >= 10 && currentMenu < 20) { // Dispense submenu

    dispenseMenu = menuSelect(joystickX, 1);

    switch (dispenseMenu) { // this block starts the dispense submenu

      //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ username input ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      case 0:
        lcd.setCursor(0, 0);
        lcd.clear();
        lcd.print("Enter user ID:");

        keyInput(0); // calls the function keyInput, the 0 indicates that we are not working with a password array.

        arrayInput(userID, 0);  // calls on the function arrayInput in order to input values into the username array

        break;  // this is the break for case 0, ends 'username input' menu

      //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ go back ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      case 1:

        flagReset(); // calls the function flagReset to change all values of iDFlag to false
        arrayReset(userID); // calls the function arrayReset to reset the userID array
        keyReset(); // This function resets the keys to be NO_KEY

        lcd.setCursor(0, 0);
        lcd.clear();
        lcd.print("To go back");
        lcd.setCursor(1, 1);
        lcd.print("press *");

        int previousSelect = keypad.getKey();

        if (previousSelect == 42) {
          currentMenu = 1;
        }

        else {
          currentMenu = currentMenu;
        }

        break; // break for case 1, ends 'go back' menu

    } // switch(dispenseMenu) closing curly brace

  } // closing curly brace for (currentMenu >= 10 && currentMenu < 20) (username input)

  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Password Menu ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  else if (currentMenu >= 20 && currentMenu < 30) { // this is for the password input

    passwordMenu = menuSelect(joystickX, 1);

    switch (passwordMenu) { // this block starts the password submenu

      //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ password input ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      case 0:
        lcd.setCursor(0, 0);
        lcd.clear();
        lcd.print("Enter password: ");

        keyInput(1); // calls the function keyInput, the 1 denotes that we are working with a password array.

        arrayInput(passwordInput, 1);  // calls on the function arrayInput in order to input values into the username array

        break;  // this is the break for case 0, ends 'password input' menu

      //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ go back ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      case 1:

        flagReset(); // calls the function flagReset to change all values of iDFlag to false
        arrayReset(passwordInput); // calls the function arrayReset to reset the passwordInput array
        keyReset(); // This function resets the keys to be NO_KEY

        lcd.setCursor(0, 0);
        lcd.clear();
        lcd.print("To go back");
        lcd.setCursor(1, 1);
        lcd.print("press *");

        int previousSelect = keypad.getKey();

        if (previousSelect == 42) {
          currentMenu = 1;
        }

        else {
          currentMenu = currentMenu;
        }

        break; // break for case 1, ends 'go back' menu

    } // closing brace for the switch statement

  } // closing curly brace for (currentMenu >= 20 && currentMenu < 30) (password input)


  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Settings Menu ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  else if (currentMenu >= 30 && currentMenu < 40) { // this is the settings menu

    settingsMenu = menuSelect(joystickX, 1);

    switch (settingsMenu) {

      //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ current Temp ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      case 0:
        currentTemperature = ((analogRead(temperaturePin)) - 4); // the -4 C is a correction (test showed 75 F, room temp is 68)
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Current Temp.");
        lcd.setCursor(0, 1);
        lcd.print(currentTemperature);
        lcd.print(" C");
        delay(150);
        break;

      //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ go back ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      case 1: // go back

        keyReset(); // This function resets the keys to be NO_KEY

        lcd.setCursor(0, 0);
        lcd.clear();
        lcd.print("To go back");
        lcd.setCursor(1, 1);
        lcd.print("press *");

        int previousSelect = keypad.getKey();

        if (previousSelect == 42) {
          currentMenu = 1;
        }

        else {
          currentMenu = currentMenu;
        }

        break; // break for case 1, ends 'go back' menu

    }

  } // closing curly brace for (currentMenu >= 30 && currentMenu < 40) (settings)


} // main loop closing curly brace

//***************************************************************************************************
//***************************************************************************************************
//********************************************* Functions *******************************************
//***************************************************************************************************
//***************************************************************************************************

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ arrayCheck ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Compares two arrays against each other, used for user ID and password input

bool arrayCheck(char array1[], char array2[]) { // the two arrays to be compared against each other are entered as input arguments

  bool checkArrays [4] = {false, false, false, false}; // create a local array of bool values
  int counter = 0;
  bool finalCheck; // this is what the function will return

  for (int i = 0; i < 4; i++) {

    if (array1[i] == array2[i]) {
      checkArrays[i] = true;
    }

    else {
      checkArrays[i] = false;
    }

  }

  for (int i = 0; i < 4; i++) {
    counter = counter + checkArrays[i]; // counts the number of trues in the ID flag array, if true then we add a 1
  }

  if (counter == 4) {
    finalCheck = true;
  }

  else {
    finalCheck = false;
  }

  return finalCheck; // returns the final check variable as either true or false

}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ arrayInput ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Inputs values into the arary, can be recycled for both username and password.  This function takes
// an array to be modified as an input value, and does not return a value.

void arrayInput(char inputArray[], bool password) {

  // This block of code deals with the FIRST value of the array of interest
  if (key0 != NO_KEY && iDFlag[0] == false) { // conditions for entering the FIRST value in the array
    inputArray[0] = key0; // enter the value stored in the key0 variable to the first value of the input array
    passwordMask[0] = 42;
    lcd.setCursor(0, 1); // sets cursor at column 0, row 0

    if (password == false) {
      lcdDisplay(inputArray, 1); // display the first value of the input array on the LCD screen
    }
    else { // if the boolean input value "password" is false
      lcdDisplay(passwordMask, 1); // display a * for the first value of the array on the LCD screen instead.
    }

    iDFlag[0] = true; // set the first value of iDFlag to be true
  }

  else { // if the conditions for entering the FIRST value in the array are not met
    lcd.setCursor(0, 1); // sets cursor at column 0, row 0

    if (password == false) { // if the boolean input value "password" is false
      lcdDisplay(inputArray, 1); // display 1 digit of the entered array
    }
    else { // if the boolean input value "password" is true
      lcdDisplay(passwordMask, 1); // display a * instead to mask the password
    }
  }



  // This block deals with the SECOND value of the array of interest
  if (key1 != NO_KEY && iDFlag[1] == false) { // conditions for entering the SECOND value in the array
    inputArray[1] = key1; // input the value stored in the variable key1 into the second value in the input array
    passwordMask[1] = 42;
    lcd.setCursor(0, 1); // sets the LCD cursor to row 2, column 1

    if (password == false) { // if the input variable "password" is set to false (input 0)
      lcdDisplay(inputArray, 2); // display two digits of the input array
    }

    else { // if the input variable "password" is set to true (input 1)
      lcdDisplay(passwordMask, 2); // display two digits of the passwordMask array
    }

    iDFlag[1] = true; // set the second value of the iDFlag array equal to true
  }

  else { // if the conditions for entering the SECOND value in the array are not met
    lcd.setCursor(0, 1); // sets cursor at column 1, row 2

    if (password == false) {  // if the value for the input variable "password" is set to 0
      lcdDisplay(inputArray, 2);  // display two values on the input arrray
    }
  }



  // This block deals with the THIRD value of the array of interest
  if (key2 != NO_KEY && iDFlag[2] == false) { // conditions for entering the THIRD value in the array
    inputArray[2] = key2; // input the value stored in the variable key2 into the third value in the input array
    passwordMask[2] = 42;
    lcd.setCursor(0, 1); // sets cursor at column 1, row 2

    if (password == false) {  // if the value for the input variable "password" is set to 0
      lcdDisplay(inputArray, 3); // display three values on the input arrray
    }

    else { // if the conditions for entering the THIRD value in the array are not met
      lcdDisplay(passwordMask, 3); // display three digits of the passwordMask array
    }

    iDFlag[2] = true; // set the third value of the iDFlag array equal to true
  }

  else { // if the conditions for entering the third value of the array are not met
    lcd.setCursor(0, 1); // sets cursor at column 0, row 1

    if (password == false) { // if the value for the input variable "password" is set to 0
      lcdDisplay(inputArray, 3); // display three values on the input arrray
    }

    else {
      lcdDisplay(passwordMask, 3); // display three digits of the passwordMask array
    }
  }



  // This block deals with the FOURTH value of the array of interest
  if (key3 != NO_KEY && iDFlag[3] == false) { // conditions for entering the FOURTH value in the array
    inputArray[3] = key3; // input the value stored in the variable key3 into the fourth value in the input array
    passwordMask[3] = 42;
    lcd.setCursor(0, 1); // sets cursor at column 0, row 1

    if (password == false) { // if the value for the input variable "password" is set to 0
      lcdDisplay(inputArray, 4);  // display four values on the input arrray
    }

    else {
      lcdDisplay(passwordMask, 4); // display four values on the passwordMask arrray
    }

    iDFlag[3] = true; // set the final value of the iDFlag array to be true
  }

  else { // if the input conditions are not met
    lcd.setCursor(0, 1); // sets cursor at column 0, row 1

    if (password == false) { // if the input variable "password" is set to 0
      lcdDisplay(inputArray, 4); // display four digits of the input array
    }

    else { // if the input variable "password" is set to 1
      lcdDisplay(passwordMask, 4);  // dispaly four variables of the array passwordMask (display four *'s)
    }
  }



} // closing curly brace for the function
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ arrayReset ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// resets all values in a username or password array back to _
void arrayReset(char inputArray[]) {
  for (int i = 0; i < 4; i++) {
    inputArray[i] = '_';
  }
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ flagReset ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// This function does not return any value.
// This function resets the ID flags used to determine which place in an array you are to enter a
// value
void flagReset() {

  for (int i = 0; i < 4; i++) {
    iDFlag[i] = false; // changes the value of the iDFlag to false for cells 0-3 of the array.
  }

}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ idFlagCount ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Counts the number of true variables in the iDFlag array.  For every true, we add a 1, for every
// false, we add a 0.  We then reutrn the total value of the count.
int idFlagCount() {

  int counter = 0; // Initialize a local variable of type int to keep a running total of each successful value.

  for (int i = 0; i < 4; i++) {
    counter = counter + iDFlag[i]; // counts the number of trues in the ID flag array, if true then we add a 1
  }

  return counter; // returns the value of the local variable

}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ keyInput ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// This function allows the program to accept an input from the keypad for all four entries
void keyInput(bool isPassword) { // enter a 0 for not a password, and 1 for password.

  bool successCheck; // local variable used to move on to next menu if necessary

  if (iDFlag[0] == false && iDFlag[1] == false && iDFlag[2] == false && iDFlag[3] == false) {
    key0 = keypad.getKey();
  }
  else if (iDFlag[0] == true && iDFlag[1] == false && iDFlag[2] == false && iDFlag[3] == false) {
    key1 = keypad.getKey();
  }
  else if (iDFlag[0] == true && iDFlag[1] == true && iDFlag[2] == false && iDFlag[3] == false) {
    key2 = keypad.getKey();
  }
  else if (iDFlag[0] == true && iDFlag[1] == true && iDFlag[2] == true && iDFlag[3] == false) {
    key3 = keypad.getKey();
  }

  else if (isPassword == false) { // if we are not working with the password array
    successCheck = arrayCheck(userID, userIDCheck); // compares userID against the predefined "password"
    if (successCheck == true) {
      currentMenu = 20;
      flagReset(); // calls the function flagReset to change all values of iDFlag to false
      keyReset(); // This function resets the keys to be NO_KEY
      arrayReset(passwordMask);
    }
    else {
      arrayReset(userID);
    }
  }

  else if (isPassword == true) { // if we are working with the password array
    successCheck = arrayCheck(passwordInput, userIDCheck); // compares userID against the predefined "password"
    if (successCheck == true) {
      lcd.clear();
      lcd.setCursor(0, 0); // sets cursor at column 0, row 0
      lcd.print("Success!");
    }
    else {
      arrayReset(passwordInput);
    }
  }

  else { // if all else fails, reset everything
    flagReset(); // calls the function flagReset to change all values of iDFlag to false
    keyReset(); // This function resets the keys to be NO_KEY
    arrayReset(passwordInput);
    arrayReset(passwordMask);
  }

}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ keypadCharacterpadDecoder ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// The keypadCharacterpadDecoder function takes an input from the keypadCharacter variable.
// It converts an ASCII input variable to a 0-9 integer.  # and * characters return their ASCII values.

int keypadCharacterpadDecoder(int keypadCharacter) {

  switch (keypadCharacter) {

    case 35: // 35 is the ASCII character for #
      keypadCharacterpadSelection = 35; // 95 is the ASCII character for _
      break;

    case 42: // 42 is the ASCII character for *
      keypadCharacterpadSelection = 42;
      break;

    case 48: // 48 is the ASCII character for 0
      keypadCharacterpadSelection = 48;
      break;

    case 49: // 49 is the ASCII character for 1
      keypadCharacterpadSelection = 49;
      break;

    case 50: // 50 is the ASCII character for 2
      keypadCharacterpadSelection = 50;
      break;

    case 51: // 51 is the ASCII character for 3
      keypadCharacterpadSelection = 51;
      break;

    case 52: // 52 is the ASCII character for 4
      keypadCharacterpadSelection = 52;
      break;

    case 53: // 53 is the ASCII character for 5
      keypadCharacterpadSelection = 53;
      break;

    case 54: // 54 is the ASCII character for 6
      keypadCharacterpadSelection = 54;
      break;

    case 55: // 55 is the ASCII character for 7
      keypadCharacterpadSelection = 55;
      break;

    case 56: // 56 is the ASCII character for 8
      keypadCharacterpadSelection = 56;
      break;

    case 57: // 57 is the ASCII character for 9
      keypadCharacterpadSelection = 57;
      break;

    default:
      keypadCharacterpadSelection = keypadCharacterpadSelection;
      break;
  }
  return keypadCharacterpadSelection; // returns the keypadCharacterpad number
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ keyReset ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// This void type function will reset the keypad inputs, key0-4 back to NO_KEY
void keyReset() {
  key0 = NO_KEY;
  key1 = NO_KEY;
  key2 = NO_KEY;
  key3 = NO_KEY;
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ lcdDisplay ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// This function, when called will display any number of digits on the LCD display
void lcdDisplay(char Array[], int digits) {
  switch (digits) {
    case 1:
      lcd.print(Array[0]);
      break;

    case 2:
      lcd.print(Array[0]);
      lcd.print(Array[1]);
      break;

    case 3:
      lcd.print(Array[0]);
      lcd.print(Array[1]);
      lcd.print(Array[2]);
      break;

    case 4:
      lcd.print(Array[0]);
      lcd.print(Array[1]);
      lcd.print(Array[2]);
      lcd.print(Array[3]);
      break;
  }
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ menuSelect ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// This function will allow the user to select a menu based on the joystick position, and return a
// variable which will be used to display the correct menu.  The returned variable is called
// menuCount.  This function allows you to control the total number of menus.

int menuSelect(float joystickX, int totalMenus) {  // inputs are joystick position and # of menus
  if (joystickX > 1000) {
    menuCount = menuCount + 1;  // upon moving the joystick increase the menu variable by 1
    keypadCharacterpadSelection = 0;  // clear the keypadCharacterpad Selection variable
    if (menuCount > totalMenus) {
      menuCount = totalMenus; // the menuCount can't go over the total number of menus
    }
  }

  else if (joystickX < 50) {
    menuCount = menuCount - 1;  // decreases the value of menu count by 1
    keypadCharacterpadSelection = 0;
    if (menuCount < 0) {
      menuCount = 0;  // menu count can't go below 0
    }
  }

  else {
    menuCount = menuCount;  // if the joystick didn't move then keep the menu the same
  }

  return menuCount;  // return which menu you are working in.
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ pound2Underscore ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// This function will convert the ASCII input # to _
void pound2Underscore(char keypadArray[], int x) {
  if (keypadArray[x] == 35) { // if the entered value is #
    keypadArray[x] = 95; // change the entered value to _
  }
  else {
    keypadArray[x] = keypadArray[x]; // otherwise keep whatever the original value was
  }
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//***************************************************************************************************
//*********************************************** Notes *********************************************
//***************************************************************************************************

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ASCII Cheat Sheet ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// # => 35
// * => 42
// 0 => 48
// 1 => 49
// 2 => 50
// 3 => 51
// 4 => 52
// 5 => 53
// 6 => 54
// 7 => 55
// 8 => 56
// 9 => 57
// _ => 95

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Links ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Micro SD Card Tutorial: https://www.instructables.com/id/Micro-SD-Card-Tutorial/
// Writing functions: https://www.arduino.cc/en/Reference/FunctionDeclaration
// ASCII chart: https://theasciicode.com.ar/ascii-control-characters/null-character-ascii-code-0.html
// Adafruit keypadCharacterpad Demo: https://www.adafruit.com/product/3845