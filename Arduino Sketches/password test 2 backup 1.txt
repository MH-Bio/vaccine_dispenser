//********************************** Libraries that are to be used **********************************
#include <LiquidCrystal.h> // LIBRARY TO ACCESS THE LCD DISPLAY
#include <Adafruit_Keypad.h>
#include <EventBuffer.h>


//******************************************** LCD Stuff ********************************************
const int rs = 13, en = 12, d4 = 11, d5 = 10, d6 = 9, d7 = 8; // declares which pins are plugged in where
LiquidCrystal lcd(rs, en, d4, d5, d6, d7); // Sets up which pins go to the LCD display


//***************************************** Password Arrays *****************************************
char userID [4] = {'_', ' ', ' ', ' '}; // A blank array that will have four slots for a user input
char userIDCheck [4] = {'1', '2', '3', '4'}; // This is the "Correct" user ID that will be compared to the input
boolean iDFlag [4] = {false, false, false, false}; // Used to check which place we are in the loop
char passwordInput [4] = {'_', '_', '_', '_'}; // Characters in the array that indicate blanks


//******************************************* Keypad Stuff ******************************************
const byte ROWS = 4; // rows
const byte COLS = 3; // columns

char keypadCharacter = '0';
char keys[ROWS][COLS] = {
  {'1', '2', '3'},
  {'4', '5', '6'},
  {'7', '8', '9'},
  {'*', '0', '#'}
};

byte rowPins[ROWS] = {45, 47, 49, 51}; //connect to the row pinouts of the keypad
byte colPins[COLS] = {46, 48, 50}; //connect to the column pinouts of the keypad

//initialize an instance of class NewKeypad
Adafruit_Keypad customKeypad = Adafruit_Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS);


//****************************************** Joystick Stuff *****************************************
const int SW_pin = 53; // digital pin that the joystick is plugged into
const int X_pin = 0; // analog pin connected to VRx
const int Y_pin = 1; // analog pin connected to VRy
float joystickX = 0.0;
float joystickY = 0.0;


//***************************************** Global Variables ****************************************
int menuCount = 0; // used to select which screen you are working in
int keypadInput = 0;
int keypadSelection = 0;
int currentMenu = 0;
bool englishFlag = true;
bool japaneseFlag = false; //日の丸です！
bool spanishFlag = false;

//***************************************************************************************************
//********************************************** Setup **********************************************
//***************************************************************************************************
void setup() {
  Serial.begin(9600); // opens serial port, sets data rate to 9600 bps
  lcd.begin(16, 2); // set up the LCD's number of columns and rows

  pinMode(SW_pin, INPUT);
  digitalWrite(SW_pin, HIGH);
  Serial.begin(9600);

  customKeypad.begin(); // starts the keypad

  // Welcome Message
  lcd.setCursor(0, 0); // sets cursor at column 0, row 0
  lcd.print("Welcome To");
  lcd.setCursor(0, 1); // sets cursor at column 0, row 1
  lcd.print("  Arduino   ");

}

//***************************************************************************************************
//*********************************************** Loop **********************************************
//***************************************************************************************************
void loop() {

  // Elements to make the keypad work are in this block of code
  customKeypad.tick();
  while (customKeypad.available()) {
    keypadEvent e = customKeypad.read();
    keypadCharacter = (char)e.bit.KEY;
  }


  joystickX = analogRead(X_pin);  // Allows the joystick to work in the X direction

  if (currentMenu < 10) {

    int mainMenu = menuSelect(joystickX, 1); // the number of menus is menu + 1, so 2 creates 3 menus

    switch (mainMenu) {
      case 0:
        lcd.setCursor(0, 0);
        lcd.clear();
        lcd.print("To dispense");
        lcd.setCursor(1, 1);
        lcd.print("press #");
        currentMenu = 1;
        if (keypadCharacter == 35) { // if the entered character is #
          currentMenu = 10;
          keypadCharacter = 0; // resets keypad character.
        }
        else {
          currentMenu = currentMenu; // if # isn't entered, do nothing.
        }
        break;

      case 1:
        lcd.setCursor(0, 0);
        lcd.clear();
        lcd.print("Settings");
        currentMenu = 2;
        break;
    }
  }

  else if (currentMenu >= 10) { // Dispense submenu

    int dispenseMenu = menuSelect(joystickX, 1);

    switch (dispenseMenu) {
      case 0:
        lcd.setCursor(0, 0);
        lcd.clear();
        lcd.print("Enter user ID:");
        lcd.setCursor(0, 1);
        lcd.print(userID[0]);
        lcd.print(userID[1]);
        lcd.print(userID[2]);
        lcd.print(userID[3]);
        arrayEntry(userID);

        break;

      case 1:
        for (int x = 0; x < 4; x++) {
          userID[x] = '_'; // resets userID for all values in the array
        }
        for (int x = 0; x < 4; x++) {
          iDFlag[x] = false; // resets iDFlag for all values in the array
        }
        lcd.setCursor(0, 0);
        lcd.clear();
        lcd.print("To go back");
        lcd.setCursor(1, 1);
        lcd.print("press *");
        int previousSelect = keypadDecoder(keypadCharacter);
        if (previousSelect == 42) {
          currentMenu = 1;
        }
        else {
          currentMenu = currentMenu;
        }
        break;
    }

  }

  delay(200);
}


//***************************************************************************************************
//********************************************* Functions *******************************************
//***************************************************************************************************

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ keypadDecoder ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// The keypadDecoder function takes an input from the keypadCharacter variable.  It converts an ASCII
// input variable to a 0-9 integer.  # and * characters return their ASCII values.

int keypadDecoder(int keypadCharacter) {

  switch (keypadCharacter) {

    case 35: // 35 is the ASCII character for #
      keypadSelection = 95; // 95 is the ASCII character for _
      break;

    case 42: // 42 is the ASCII character for *
      keypadSelection = 42;
      break;

    case 48: // 48 is the ASCII character for 0
      keypadSelection = 48;
      break;

    case 49: // 49 is the ASCII character for 1
      keypadSelection = 49;
      break;

    case 50: // 50 is the ASCII character for 2
      keypadSelection = 50;
      break;

    case 51: // 51 is the ASCII character for 3
      keypadSelection = 51;
      break;

    case 52: // 52 is the ASCII character for 4
      keypadSelection = 52;
      break;

    case 53: // 53 is the ASCII character for 5
      keypadSelection = 53;
      break;

    case 54: // 54 is the ASCII character for 6
      keypadSelection = 54;
      break;

    case 55: // 55 is the ASCII character for 7
      keypadSelection = 55;
      break;

    case 56: // 56 is the ASCII character for 8
      keypadSelection = 56;
      break;

    case 57: // 57 is the ASCII character for 9
      keypadSelection = 57;
      break;

    default:
      keypadSelection = keypadSelection;
      break;
  }
  return keypadSelection; // returns the keypad number
}


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ menuSelect ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// This function will allow the user to select a menu based on the joystick position, and return a
// variable which will be used to display the correct menu.  The returned variable is called
// menuCount.  This function allows you to control the total number of menus.

int menuSelect(float joystickX, int totalMenus) {  // inputs are joystick position and # of menus
  if (joystickX > 1000) {
    menuCount = menuCount + 1;  // upon moving the joystick increase the menu variable by 1
    keypadSelection = 0;  // clear the keypad Selection variable
    if (menuCount > totalMenus) {
      menuCount = totalMenus; // the menuCount can't go over the total number of menus
    }
  }
  else if (joystickX < 50) {
    menuCount = menuCount - 1;  // decreases the value of menu count by 1
    keypadSelection = 0;
    if (menuCount < 0) {
      menuCount = 0;  // menu count can't go below 0
    }
  }

  else {
    menuCount = menuCount;  // if the joystick didn't move then keep the menu the same
  }

  return menuCount;  // return which menu you are working in.
}


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ arrayEntry ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// This function will allow the user to take input and store the value in an array.
void arrayEntry(char inputArray[]) {
  
    if (iDFlag[0] == false && iDFlag[1] == false && iDFlag[2] == false && iDFlag[3] == false) {
  
      int enterValue = keypadDecoder(keypadCharacter);
      inputArray[0] = enterValue;
      iDFlag[0] = true;
      if (enterValue == 35 || enterValue == 95 || iDFlag[0] == 95) {
        iDFlag[0] = false;
      }
    }
    else if (iDFlag[0] == true && iDFlag[1] == false && iDFlag[2] == false && iDFlag[3] == false) {
      int enterValue1 = keypadDecoder(keypadCharacter);
      inputArray[1] = enterValue1;
      iDFlag[1] = true;
    }
  
    else if (iDFlag[0] == true && iDFlag[1] == true && iDFlag[2] == false && iDFlag[3] == false) {
      int enterValue2 = keypadDecoder(keypadCharacter);
      inputArray[2] = enterValue2;
      iDFlag[2] = true;
    }
  
    else if (iDFlag[0] == true && iDFlag[1] == true && iDFlag[2] == true && iDFlag[3] == false) {
      int enterValue3 = keypadDecoder(keypadCharacter);
      inputArray[3] = enterValue3;
      iDFlag[3] = true;
    }
    else {
      for (int x = 0; x < 4; x++) {
        inputArray[x] = inputArray[x]; // resets userID for all values in the array
      }
    }

}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ waitForInput ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// This function is supposed to wait for the user to press a button on the keypad.
void waitForInput() {

  bool waiting = true;
  int enterValue = keypadDecoder(keypadCharacter);

  if (enterValue = 35 || 42) { // if the entered value is * or #
    waiting = true;
    enterValue = keypadDecoder(keypadCharacter);
  }
  else
    waiting = false;
}

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ blinkingSpace ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//This function will cause a blinking underscore ( _ ) to appear on the screen.
void blinkingSpace() {
  lcd.print('_');
  delay(2000);
  lcd.print(' ');
  delay(2000);
}

//***************************************************************************************************
//*********************************************** Notes *********************************************
//***************************************************************************************************

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ASCII Cheat Sheet ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// # => 35
// * => 42
// 0 => 48
// 1 => 49
// 2 => 50
// 3 => 51
// 4 => 52
// 5 => 53
// 6 => 54
// 7 => 55
// 8 => 56
// 9 => 57
// _ => 95

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Links ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Micro SD Card Tutorial: https://www.instructables.com/id/Micro-SD-Card-Tutorial/
// Writing functions: https://www.arduino.cc/en/Reference/FunctionDeclaration